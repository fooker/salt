### This file is managed by saltstack - any changes will be overwritten ###

router id {{ pillar.peering.peers[grains.id].router_id }};

protocol device {
	scan time 10;
}

ipv4 table output_4;
ipv6 table output_6;

protocol kernel output_kernel_4 {
	persist;
	learn;

	ipv4 {
		table output_4;
		import none;
		export all;
	};
}

protocol kernel output_kernel_6 {
	persist;
	learn;

	ipv6 {
		table output_6;
		import none;
		export all;
	};
}

{% for domain in pillar.peering.peers[grains.id].domains|sort -%}
ipv4 table {{ domain }}_4;
ipv6 table {{ domain }}_6;

protocol direct {{ domain }}_direct {
	interface "{{ domain }}";
	check link yes;

	ipv4 {
		table {{ domain }}_4;
		import all;
		export none;
	};

	ipv6 {
		table {{ domain }}_6;
		import all;
		export none;
	};
}

{% if 'ospf' in pillar.peering.domains[domain] and 'ospf' in pillar.peering.peers[grains.id].protos %}
protocol ospf v2 {{ domain }}_ospf_4 {
	instance id {{ pillar.peering.domains[domain].ospf.instance_id }};

	area 0 {
		{%- for peer in pillar.peering.transfers[grains.id]|sort if 'ospf' in pillar.peering.peers[peer].protos and domain in pillar.peering.peers[peer].domains %}
		interface "peer.{{ pillar.peering.peers[peer].netdev }}" {
			type pointopoint;

			check link on;
		};
		{%- endfor %}
	};

	ipv4 {
		table {{ domain }}_4;
		preference {{ pillar.peering.domains[domain].ospf.preference }};

		import keep filtered;
		import filter {
			if net ~ [{{ pillar.addresses[grains.id][domain].ip4.network }}/{{ pillar.addresses[grains.id][domain].ip4.netmask }}+] then reject;

			if net ~ [
				{%- for export in pillar.peering.domains[domain].exports.ip4|sort %}
				{{ export }}+
				{%- endfor %}
			] then accept;

			if net ~ [
				{%- for filter in pillar.peering.domains[domain].filters.ip4|sort %}
				{{ filter }}
				{%- if not loop.last -%},{%- endif %}
				{%- endfor %}
			] then accept;

			reject;
		};
		export filter {
			if net ~ [
				{%- for export in pillar.peering.domains[domain].exports.ip4|sort %}
				{{ export }}+
				{%- endfor %}
			] then accept;

			if net ~ [
				{%- for filter in pillar.peering.domains[domain].filters.ip4|sort %}
				{{ filter }}
				{%- if not loop.last -%},{%- endif %}
				{%- endfor %}
			] then accept;

			reject;
		};
	};
}

protocol ospf v3 {{ domain }}_ospf_6 {
	rfc5838 no;
	instance id {{ pillar.peering.domains[domain].ospf.instance_id }};

	area 0 {
		{%- for peer in pillar.peering.transfers[grains.id]|sort if 'ospf' in pillar.peering.peers[peer].protos and domain in pillar.peering.peers[peer].domains %}
		interface "peer.{{ pillar.peering.peers[peer].netdev }}" {
			type pointopoint;

			check link on;
		};
		{%- endfor %}
	};

	ipv6 {
		table {{ domain }}_6;
		preference {{ pillar.peering.domains[domain].ospf.preference }};

		import keep filtered;
		import filter {
			if net ~ [{{ pillar.addresses[grains.id][domain].ip6.network }}/{{ pillar.addresses[grains.id][domain].ip6.netmask }}+] then reject;

			if net ~ [
				{%- for export in pillar.peering.domains[domain].exports.ip6|sort %}
				{{ export }}+
				{%- endfor %}
			] then accept;

			if net ~ [
				{%- for filter in pillar.peering.domains[domain].filters.ip6|sort %}
				{{ filter }}
				{%- if not loop.last -%},{%- endif %}
				{%- endfor %}
			] then accept;

			reject;
		};
		export filter {
			if net ~ [
				{%- for export in pillar.peering.domains[domain].exports.ip6|sort %}
				{{ export }}+
				{%- endfor %}
			] then accept;

			if net ~ [
				{%- for filter in pillar.peering.domains[domain].filters.ip6|sort %}
				{{ filter }}
				{%- if not loop.last -%},{%- endif %}
				{%- endfor %}
			] then accept;

			reject;
		};
	};
}
{% endif %}

{% if 'babel' in pillar.peering.domains[domain] and 'babel' in pillar.peering.peers[grains.id].protos %}
protocol babel {{ domain }}_babel {
	ipv4 {
		table {{ domain }}_4;

		import keep filtered;
		import filter {
			if net ~ [{{ pillar.addresses[grains.id][domain].ip4.network }}/{{ pillar.addresses[grains.id][domain].ip4.netmask }}+] then reject;

			if net ~ [
				{%- for export in pillar.peering.domains[domain].exports.ip4|sort %}
				{{ export }}+
				{%- endfor %}
			] then accept;

			if net ~ [
				{%- for filter in pillar.peering.domains[domain].filters.ip4|sort %}
				{{ filter }}
				{%- if not loop.last -%},{%- endif %}
				{%- endfor %}
			] then accept;

			reject;
		};
		export filter {
			if net ~ [
				{%- for export in pillar.peering.domains[domain].exports.ip4|sort %}
				{{ export }}+
				{%- endfor %}
			] then accept;

			if net ~ [
				{%- for filter in pillar.peering.domains[domain].filters.ip4|sort %}
				{{ filter }}
				{%- if not loop.last -%},{%- endif %}
				{%- endfor %}
			] then accept;

			reject;
		};
	};

	ipv6 {
		table {{ domain }}_6;

		import keep filtered;
		import filter {
			if net ~ [{{ pillar.addresses[grains.id][domain].ip6.network }}/{{ pillar.addresses[grains.id][domain].ip6.netmask }}+] then reject;

			if net ~ [
				{%- for export in pillar.peering.domains[domain].exports.ip6|sort %}
				{{ export }}+
				{%- endfor %}
			] then accept;

			if net ~ [
				{%- for filter in pillar.peering.domains[domain].filters.ip6|sort %}
				{{ filter }}
				{%- if not loop.last -%},{%- endif %}
				{%- endfor %}
			] then accept;

			reject;
		};
		export filter {
			if net ~ [
				{%- for export in pillar.peering.domains[domain].exports.ip6|sort %}
				{{ export }}+
				{%- endfor %}
			] then accept;

			if net ~ [
				{%- for filter in pillar.peering.domains[domain].filters.ip6|sort %}
				{{ filter }}
				{%- if not loop.last -%},{%- endif %}
				{%- endfor %}
			] then accept;

			reject;
		};
	};

	{% for peer in pillar.peering.transfers[grains.id]|sort if 'babel' in pillar.peering.peers[peer].protos and domain in pillar.peering.peers[peer].domains %}
	interface "peer.{{ pillar.peering.peers[peer].netdev }}" {
		type wired;
		check link on;

		next hop ipv4 {{pillar.peering.transfers[grains.id][peer].ip4.local  }};
		next hop ipv6 {{pillar.peering.transfers[grains.id][peer].ip6.local  }};
	};
	{% endfor %}
}
{% endif %}

{% if 'bgp' in pillar.peering.domains[domain] and ('bgp' in pillar.peering.peers[grains.id].protos or 'ibgp' in pillar.peering.peers[grains.id].protos) %}
ipv4 table {{ domain }}_egp_4;
ipv6 table {{ domain }}_egp_6;

protocol static {{ domain }}_static_4 {
	{%- for export in pillar.peering.domains[domain].exports.ip4|sort %}
	route {{ export }} via "{{ domain }}";
	{%- endfor %}

	ipv4 {
		table {{ domain }}_egp_4;
		import all;
		export none;
	};
}

protocol static {{ domain }}_static_6 {
	{%- for export in pillar.peering.domains[domain].exports.ip6|sort %}
	route {{ export }} via "{{ domain }}";
	{%- endfor %}

	ipv6 {
		table {{ domain }}_egp_6;
		import all;
		export none;
	};
}

{% if 'roa' in pillar.peering.domains[domain].bgp %}
roa4 table {{ domain }}_roa_4;
roa6 table {{ domain }}_roa_6;

protocol static {{ domain }}_roa_static_4 {
	include "{{ pillar.peering.domains[domain].bgp.roa.ip4 }}";

	roa4 {
		table {{ domain }}_roa_4;
		import all;
		export none;
	};
}

protocol static {{ domain }}_roa_static_6 {
	include "{{ pillar.peering.domains[domain].bgp.roa.ip6 }}";

	roa6 {
		table {{ domain }}_roa_6;
		import all;
		export none;
	};
}
{% endif %}

template bgp {{ domain }}_bgp {
	local as {{ pillar.peering.domains[domain].bgp.as }};

	path metric on;

	check link on;
	direct;
}

template bgp {{ domain }}_bgp_4 from {{ domain }}_bgp {
	ipv4 {
		table {{ domain }}_egp_4;
		preference {{ pillar.peering.domains[domain].bgp.preference }};

		next hop self;

		import keep filtered;
		import limit 1000 action block;
		import filter {
			if net ~ [{{ pillar.addresses[grains.id][domain].ip4.network }}/{{ pillar.addresses[grains.id][domain].ip4.netmask }}+] then {
				print "[{{ domain }}] Received local network from external: ", net, " from ", bgp_path.last;
				reject;
			}

			if net ~ [
				{%- for export in pillar.peering.domains[domain].exports.ip4|sort %}
				{{ export }}+
				{%- endfor %}
			] then {
				print "[{{ domain }}] Received own prefix from external: ", net, " from ", bgp_path.last;
				reject;
			}

{% if 'roa' in pillar.peering.domains[domain].bgp %}
			if (roa_check({{ domain }}_roa_4, net, bgp_path.last) != ROA_VALID) then {
				print "[{{ domain }}] ROA check failed: ", net, " from ", bgp_path.last;
				reject;
			}
{% endif %}

			if net !~ [
				{%- for filter in pillar.peering.domains[domain].filters.ip4|sort %}
				{{ filter }}
				{%- if not loop.last -%},{%- endif %}
				{%- endfor %}
			] then {
				print "[{{ domain }}] Network not allowed: ", net, " from ", bgp_path.last;
				reject;
			}

			accept;
		};
		export filter {
			if net ~ [
				{%- for export in pillar.peering.domains[domain].exports.ip4|sort %}
				{{ export }}+
				{%- endfor %}
			] then accept;

			if net ~ [
				{%- for filter in pillar.peering.domains[domain].filters.ip4|sort %}
				{{ filter }}
				{%- if not loop.last -%},{%- endif %}
				{%- endfor %}
			] then accept;

			print "[{{ domain }}] Illegal export: ", net, " from ", bgp_path.last;
			reject;
		};
	};
}

template bgp {{ domain }}_bgp_6 from {{ domain }}_bgp {
	ipv6 {
		table {{ domain }}_egp_6;
		preference {{ pillar.peering.domains[domain].bgp.preference }};

		next hop self;

		import keep filtered;
		import limit 1000 action block;
		import filter {
			if net ~ [{{ pillar.addresses[grains.id][domain].ip6.network }}/{{ pillar.addresses[grains.id][domain].ip6.netmask }}+] then {
				print "[{{ domain }}] Received local network from external: ", net, " from ", bgp_path.last;
				reject;
			}

			if net ~ [
				{%- for export in pillar.peering.domains[domain].exports.ip6|sort %}
				{{ export }}+
				{%- endfor %}
			] then {
				print "[{{ domain }}] Received own prefix from external: ", net, " from ", bgp_path.last;
				reject;
			}

{% if 'roa' in pillar.peering.domains[domain].bgp %}
			if (roa_check({{ domain }}_roa_6, net, bgp_path.last) != ROA_VALID) then {
				print "[{{ domain }}] ROA check failed: ", net, " from ", bgp_path.last;
				reject;
			}
{% endif %}

			if net !~ [
				{%- for filter in pillar.peering.domains[domain].filters.ip6|sort %}
				{{ filter }}
				{%- if not loop.last -%},{%- endif %}
				{%- endfor %}
			] then {
				print "[{{ domain }}] Network not allowed: ", net, " from ", bgp_path.last;
				reject;
			}

			accept;
		};
		export filter {
			if net ~ [
				{%- for export in pillar.peering.domains[domain].exports.ip6|sort %}
				{{ export }}+
				{%- endfor %}
			] then accept;

			if net ~ [
				{%- for filter in pillar.peering.domains[domain].filters.ip6|sort %}
				{{ filter }}
				{%- if not loop.last -%},{%- endif %}
				{%- endfor %}
			] then accept;

			print "[{{ domain }}] Illegal export: ", net, " from ", bgp_path.last;
			reject;
		};
	};
}

{% for peer in pillar.peering.transfers[grains.id]|sort if 'bgp' in pillar.peering.peers[peer].protos and domain in pillar.peering.peers[peer].domains %}
protocol bgp {{ domain }}_bgp_{{ pillar.peering.peers[peer].netdev | replace('.', '_') }}_4 from {{ domain }}_bgp_4 {
	neighbor {{ pillar.peering.transfers[grains.id][peer].ip4.remote }} as {{ pillar.peering.peers[peer].as }};
}
protocol bgp {{ domain }}_bgp_{{ pillar.peering.peers[peer].netdev | replace('.', '_') }}_6 from {{ domain }}_bgp_6 {
	neighbor {{ pillar.peering.transfers[grains.id][peer].ip6.remote }} as {{ pillar.peering.peers[peer].as }};
	interface "peer.{{ pillar.peering.peers[peer].netdev }}";
}
{% endfor %}

{% for peer in pillar.peering.transfers[grains.id]|sort if 'ibgp' in pillar.peering.peers[peer].protos and domain in pillar.peering.peers[peer].domains %}
protocol bgp {{ domain }}_bgp_{{ pillar.peering.peers[peer].netdev | replace('.', '_') }}_4 from {{ domain }}_bgp_4 {
	neighbor {{ pillar.peering.transfers[grains.id][peer].ip4.remote }} as {{ pillar.peering.domains[domain].bgp.as }};
}
protocol bgp {{ domain }}_bgp_{{ pillar.peering.peers[peer].netdev | replace('.', '_') }}_6 from {{ domain }}_bgp_6 {
	neighbor {{ pillar.peering.transfers[grains.id][peer].ip6.remote }} as {{ pillar.peering.domains[domain].bgp.as }};
	interface "peer.{{ pillar.peering.peers[peer].netdev }}";
}
{% endfor %}

protocol pipe {{ domain }}_egp_pipe_4 {
	table {{ domain }}_egp_4;
	peer table {{ domain }}_4;

	import none;
	export all;
}

protocol pipe {{ domain }}_egp_pipe_6 {
	table {{ domain }}_egp_6;
	peer table {{ domain }}_6;

	import none;
	export all;
}
{% endif %}

protocol pipe {{ domain }}_pipe_4 {
	table {{ domain }}_4;
	peer table output_4;

	import none;
	export filter {
		krt_prefsrc = {{ pillar.addresses[grains.id][domain].ip4.address }};
		if net ~ [{{ pillar.addresses[grains.id][domain].ip4.network }}/{{ pillar.addresses[grains.id][domain].ip4.netmask }}+] then reject;

		accept;
	};
}

protocol pipe {{ domain }}_pipe_6 {
	table {{ domain }}_6;
	peer table output_6;

	import none;
	export filter {
		krt_prefsrc = {{ pillar.addresses[grains.id][domain].ip6.address }};
		if net ~ [{{ pillar.addresses[grains.id][domain].ip6.network }}/{{ pillar.addresses[grains.id][domain].ip6.netmask }}+] then reject;

		accept;
	};
}

{% endfor -%}

