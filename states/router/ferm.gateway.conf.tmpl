table nat
chain POSTROUTING {
  # Simple PNAT masquerading
  out-interface ext MASQUERADE;
}

table filter {
  chain FORWARD {
    # Allow forwarding between some networks
    in-interface (int.mngt int.priv int.open) out-interface ext      ACCEPT;
    in-interface int.priv                     out-interface int.open ACCEPT;
  
    # Allow related connections to be forwarded back to originator
    mod conntrack ctstate INVALID DROP;
    mod conntrack ctstate (ESTABLISHED RELATED) ACCEPT;
  }
  
  chain INPUT {
  
    # Allow access to all service from internal private and management
    in-interface (int.priv int.mngt) ACCEPT;
  }
}

table nat
chain PREROUTING {
{%- for f in pillar['nat']['forwardings'] %}
  in-interface ext
  proto {{ f['proto'] }} dport {{ f['dport'] }}
  DNAT to {{ f['thost'] }}:{{ f['tport'] }};
{% endfor -%}
}

table filter
chain FORWARD {
{%- for f in pillar['nat']['forwardings'] %}
  in-interface ext
  proto {{ f['proto'] }} dport {{ f['dport'] }}
  destination {{ f['thost'] }} ACCEPT;
{% endfor -%}
}

